local placeId = game.PlaceId
local allowedPlaceId = 9391468976 -- ID do lugar específico

if placeId ~= allowedPlaceId then
    return
end

local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Jujutsu Shenanigans  ",
    SubTitle = "       By Nozer Hub | First Version",
    TabWidth = 135,
    Size = UDim2.fromOffset(500, 350),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    InfoScript = Window:AddTab({ Title = "Info Script", Icon = "scroll" }),
    Main = Window:AddTab({ Title = "Main", Icon = "home" }), 
    Skills = Window:AddTab({ Title = "Skills", Icon = "star" }), 
    Others = Window:AddTab({ Title = "Others", Icon = "folder" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "eye" }),
    SwitchFast = Window:AddTab({ Title = "Switch Fast", Icon = "repeat" }),
    LocalPlayer = Window:AddTab({ Title = "Local Player", Icon = "user" }),
    Counter = Window:AddTab({ Title = "Counter", Icon = "clock" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "list" }),
    AntiLag = Window:AddTab({ Title = "Anti Lag", Icon = "shield" }),
    Settings = Window:AddTab({ Title = "UI Settings", Icon = "settings" }),
}

local Options = Fluent.Options

Fluent:Notify({
    Title = "By Nozer Hub",
    Content = "Thanks for using the script",
    Duration = 5
})

local SupportSection = Tabs.InfoScript:AddSection("Support")
Tabs.InfoScript:AddParagraph({
    Title = "Supported Devices",
    Content = "- Mobile\n- PC\n- Emulator\n- Console"
})

local UpdatesSection = Tabs.InfoScript:AddSection("Updates")
Tabs.InfoScript:AddParagraph({
    Title = "Updates",
    Content = "- 8/11/2024"
})

local SupportSection = Tabs.InfoScript:AddSection("Support Executors")
Tabs.InfoScript:AddParagraph({
    Title = "Executors",
    Content = "- Delta\n- Fluxus\n- Arceus X\n- Wave\n- Codex"
})

local CreditsSection = Tabs.InfoScript:AddSection("Credits")
local linkParaCopiar = "https://www.youtube.com/@NozerHub"
Tabs.InfoScript:AddButton({
    Title = "Copy Link Channel",
    Callback = function()
        setclipboard(linkParaCopiar)
    end
})

local AttackSection = Tabs.Main:AddSection("Attack")

local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Attack", Default = false })

Toggle:OnChanged(function()
    if Toggle.Value then
        while Toggle.Value do
            local argsGojo = { [1] = false }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("GojoService"):WaitForChild("RE"):WaitForChild("Activated"):FireServer(unpack(argsGojo))

            local argsItadori = { [1] = false }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItadoriService"):WaitForChild("RE"):WaitForChild("Activated"):FireServer(unpack(argsItadori))

            local argsHakari = { [1] = false }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HakariService"):WaitForChild("RE"):WaitForChild("Activated"):FireServer(unpack(argsHakari))

            local argsMegumi = { [1] = false }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("MegumiService"):WaitForChild("RE"):WaitForChild("Activated"):FireServer(unpack(argsMegumi))

            wait(0.1)
        end
    end
end)

local Toggle = Tabs.Main:AddToggle("MyToggle", {Title = "Auto Dash Attack", Default = false })

Toggle:OnChanged(function()
    if Toggle.Value then
        while Toggle.Value do
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("GojoService"):WaitForChild("RE"):WaitForChild("Chase"):FireServer()

            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("ItadoriService"):WaitForChild("RE"):WaitForChild("Chase"):FireServer()

            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("HakariService"):WaitForChild("RE"):WaitForChild("Chase"):FireServer()

            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("MegumiService"):WaitForChild("RE"):WaitForChild("Chase"):FireServer()

            wait(0.1)
        end
    end
end)

-- Toggle para ativar/desativar o Auto Farm
local Toggle = Tabs.Main:AddToggle("AutoFarmToggle", {
    Title = "Kill Farm",
    Default = false,
})

local isAutoFarming = false
local targetPlayer = nil

-- Função para obter um jogador aleatório
local function getRandomPlayer()
    local players = game.Players:GetPlayers()
    local otherPlayers = {}

    -- Filtra os jogadores que não sejam o próprio jogador
    for _, p in ipairs(players) do
        if p ~= game.Players.LocalPlayer and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
            table.insert(otherPlayers, p)
        end
    end

    -- Retorna um jogador aleatório
    return #otherPlayers > 0 and otherPlayers[math.random(1, #otherPlayers)] or nil
end

-- Função para teleportar e alinhar o personagem atrás do jogador alvo
local function teleportToTarget()
    if targetPlayer and targetPlayer.Character then
        local targetCharacter = targetPlayer.Character
        local targetRootPart = targetCharacter:FindFirstChild("HumanoidRootPart")

        -- Verifica se o alvo tem o HumanoidRootPart
        if targetRootPart then
            local humanoidRootPart = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")

            -- Posiciona o personagem atrás do jogador alvo (com distância ajustada)
            local offset = targetRootPart.CFrame * CFrame.new(0, 0, 2)  -- Distância ajustada para ficar atrás
            humanoidRootPart.CFrame = CFrame.new(offset.Position)

            -- Faz o personagem ficar virado para o alvo
            local direction = (targetRootPart.Position - humanoidRootPart.Position).unit
            humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position, targetRootPart.Position + direction)
        end
    else
        -- Se o jogador alvo não existe, escolhe um novo alvo
        targetPlayer = getRandomPlayer()
    end
end

-- Função para monitorar a morte do jogador e trocar de alvo
local function monitorPlayerDeath()
    if targetPlayer and targetPlayer.Character then
        targetPlayer.Character:WaitForChild("Humanoid").Died:Connect(function()
            print(targetPlayer.Name .. " morreu, trocando de alvo.")
            targetPlayer = getRandomPlayer()  -- Troca para um novo jogador quando o alvo morre
        end)
    end
end

-- Controle da lógica do toggle
Toggle:OnChanged(function()
    if Toggle.Value then
        print("Auto Farm ativado")  -- Mensagem de debug para ativação
        targetPlayer = getRandomPlayer()  -- Seleciona um alvo inicial
        monitorPlayerDeath()  -- Inicia a monitoração da morte do jogador alvo
        isAutoFarming = true
    else
        print("Auto Farm desativado")  -- Mensagem de debug para desativação
        isAutoFarming = false
        targetPlayer = nil  -- Reseta o alvo ao desativar
    end
end)

-- Loop para manter o personagem nas costas do jogador alvo enquanto o toggle estiver ativado
spawn(function()
    while true do
        if isAutoFarming then
            if targetPlayer then
                teleportToTarget()  -- Teleporta para o jogador atual
            else
                targetPlayer = getRandomPlayer()  -- Se o alvo não existe mais, escolhe um novo
            end
        end
        wait(0.1)  -- Atualiza frequentemente para garantir que o personagem siga o alvo e fique virado para ele
    end
end)

local AntiAFKEnabled = true
local Toggle = Tabs.Misc:AddToggle("MyToggle", { Title = "Anti AFK", Default = true })
Toggle:OnChanged(function()
    AntiAFKEnabled = Options.MyToggle.Value
end)
Options.MyToggle:SetValue(true)

Tabs.Misc:AddButton({
    Title = "Server Hop",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local HttpService = game:GetService("HttpService")
        local placeId = game.PlaceId

        local function serverHop()
            local servers
            local cursor = ""

            local success, response = pcall(function()
                local url = "https://games.roblox.com/v1/games/" .. placeId .. "/servers/Public?sortOrder=Asc&limit=100&cursor=" .. cursor
                return HttpService:JSONDecode(game:HttpGet(url))
            end)

            if success and response and response.data then
                servers = response.data
            else
                return
            end

            for _, server in ipairs(servers) do
                if server.id ~= game.JobId and server.playing < server.maxPlayers then
                    TeleportService:TeleportToPlaceInstance(placeId, server.id)
                    return
                end
            end

            if response.nextPageCursor then
                cursor = response.nextPageCursor
                serverHop()
            else
            end
        end

        serverHop()
    end
})

Tabs.Misc:AddButton({
    Title = "Rejoin",
    Callback = function()
        local TeleportService = game:GetService("TeleportService")
        local player = game.Players.LocalPlayer
        TeleportService:Teleport(game.PlaceId, player)
    end
})

local Dropdown = Tabs.SwitchFast:AddDropdown("Dropdown", {
    Title = "Select",
    Values = { "Honored One", "Vessel", "Restless Gambler", "Tem Shadows" },
    Multi = false,
    Default = 1,
})

Dropdown:SetValue("Honored One")

local selectedValue
Dropdown:OnChanged(function(Value)
    selectedValue = Value
end)

Tabs.SwitchFast:AddButton({
    Title = "Apply Character",
    Callback = function()
        if selectedValue == "Honored One" then
            local args = { [1] = "Gojo" }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("JoinService"):WaitForChild("RE"):WaitForChild("Change"):FireServer(unpack(args))

        elseif selectedValue == "Vessel" then
            local args = { [1] = "Itadori" }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("JoinService"):WaitForChild("RE"):WaitForChild("Change"):FireServer(unpack(args))

        elseif selectedValue == "Restless Gambler" then
            local args = { [1] = "Hakari" }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("JoinService"):WaitForChild("RE"):WaitForChild("Change"):FireServer(unpack(args))

        elseif selectedValue == "Tem Shadows" then
            local args = { [1] = "Megumi" }
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild("JoinService"):WaitForChild("RE"):WaitForChild("Change"):FireServer(unpack(args))
        end
    end
})

local AutoPlaySection = Tabs.Main:AddSection("Auto Play")

local Toggle = Tabs.Main:AddToggle("MyToggle", { Title = "Auto Play", Default = false })
local autoPlayActive = false  -- Variável para controlar o loop

Toggle:OnChanged(function()
    autoPlayActive = Toggle.Value  -- Atualiza o estado da variável de controle

    local function getClosestPlayer()
        local closestPlayer = nil
        local closestDistance = math.huge

        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= game.Players.LocalPlayer and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                local distance = (otherPlayer.Character.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance then
                    closestPlayer = otherPlayer
                    closestDistance = distance
                end
            end
        end
        return closestPlayer
    end

    local function moveToClosestPlayer()
        local closestPlayer = getClosestPlayer()
        
        if closestPlayer and closestPlayer.Character and closestPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local targetPosition = closestPlayer.Character.HumanoidRootPart.Position
            game.Players.LocalPlayer.Character.Humanoid:MoveTo(targetPosition)
        end
    end

    local function monitorPlayerStatus()
        local closestPlayer = getClosestPlayer()

        if closestPlayer then
            closestPlayer.CharacterAdded:Connect(function(character)
                local humanoid = character:WaitForChild("Humanoid")
                humanoid.Died:Connect(function()
                    print(closestPlayer.Name .. " morreu. Procurando novo alvo...")
                end)
            end)

            closestPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    print(closestPlayer.Name .. " saiu do servidor. Procurando novo alvo...")
                end
            end)
        end
    end

    -- Interrompe o movimento quando o toggle for desativado
    if not autoPlayActive then
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            humanoid:MoveTo(game.Players.LocalPlayer.Character.HumanoidRootPart.Position)  -- Cancela o movimento atual
        end
        return
    end

    -- Inicia o movimento e monitoramento quando o toggle for ativado
    spawn(function()  -- Inicia em uma thread separada
        while autoPlayActive do
            moveToClosestPlayer()
            monitorPlayerStatus()
            wait(1)
        end
    end)
end)

Options.MyToggle:SetValue(false)


-- Criação do toggle para ativar/desativar o ESP
local Toggle = Tabs.ESP:AddToggle("MyToggle", { Title = "Players ESP", Default = false })

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local highlight = Instance.new("Highlight")
highlight.Name = "Highlight"
local localPlayer = Players.LocalPlayer

-- Função para adicionar o Highlight ao jogador, exceto o localPlayer
local function addHighlight(player)
    if player ~= localPlayer and Toggle.Value then
        repeat wait() until player.Character
        if not player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight") then
            local highlightClone = highlight:Clone()
            highlightClone.Adornee = player.Character
            highlightClone.Parent = player.Character:FindFirstChild("HumanoidRootPart")
            highlightClone.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop
            highlightClone.Name = "Highlight"
        end
    end
end

-- Adiciona Highlight para os jogadores existentes no servidor, exceto o localPlayer
for _, player in pairs(Players:GetPlayers()) do
    addHighlight(player)
end

-- Observa e adiciona Highlight para novos jogadores que entrarem no servidor
Players.PlayerAdded:Connect(function(player)
    addHighlight(player)
end)

-- Remove o Highlight quando um jogador sai do servidor
Players.PlayerRemoving:Connect(function(playerRemoved)
    if playerRemoved ~= localPlayer then
        local highlightPart = playerRemoved.Character:FindFirstChild("HumanoidRootPart")
        if highlightPart and highlightPart:FindFirstChild("Highlight") then
            highlightPart.Highlight:Destroy()
        end
    end
end)

-- Verifica continuamente se o Highlight está ativo para todos os jogadores enquanto o toggle estiver ligado
RunService.Heartbeat:Connect(function()
    if Toggle.Value then  -- Verifica se o toggle está ativo
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= localPlayer then
                repeat wait() until player.Character
                if not player.Character:FindFirstChild("HumanoidRootPart"):FindFirstChild("Highlight") then
                    addHighlight(player)
                    task.wait()
                end
            end
        end
    else
        -- Remove o Highlight de todos os jogadores quando o toggle está desativado
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= localPlayer then
                local highlightPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if highlightPart and highlightPart:FindFirstChild("Highlight") then
                    highlightPart.Highlight:Destroy()
                end
            end
        end
    end
end)

-- Ação quando o toggle é alterado
Toggle:OnChanged(function()
    print("Toggle changed:", Toggle.Value)
end)

local Toggle = Tabs.ESP:AddToggle("NametagESP", {
    Title = "Nametag ESP", 
    Default = false
})

local player = game.Players.LocalPlayer
local nametagESPEnabled = false
local nametags = {}

local function addNametag(targetPlayer)
    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Size = UDim2.new(0, 50, 0, 25)  -- Tamanho fixo pequeno
        billboardGui.StudsOffset = Vector3.new(0, 3, 0)
        billboardGui.AlwaysOnTop = true
        billboardGui.Parent = targetPlayer.Character.Head

        local nameLabel = Instance.new("TextLabel", billboardGui)
        nameLabel.Size = UDim2.new(1, 0, 1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.Text = targetPlayer.Name
        nameLabel.TextColor3 = Color3.new(1, 1, 1) -- Cor branca
        nameLabel.TextSize = 12  -- Tamanho pequeno fixo
        nameLabel.Font = Enum.Font.Gotham
        nameLabel.TextScaled = false

        nametags[targetPlayer] = nameLabel
    end
end

local function removeNametag(targetPlayer)
    if nametags[targetPlayer] then
        nametags[targetPlayer]:Destroy()
        nametags[targetPlayer] = nil
    end
end

Toggle:OnChanged(function()
    nametagESPEnabled = Toggle.Value
    if nametagESPEnabled then
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player then
                addNametag(otherPlayer)
            end
        end
        game.Players.PlayerAdded:Connect(function(newPlayer)
            if nametagESPEnabled and newPlayer ~= player then
                newPlayer.CharacterAdded:Connect(function()
                    addNametag(newPlayer)
                end)
            end
        end)
    else
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            removeNametag(otherPlayer)
        end
    end
end)

Options.NametagESP:SetValue(false)

local Toggle = Tabs.ESP:AddToggle("HealthESP", {
    Title = "Player Health ESP", 
    Default = false
})

local player = game.Players.LocalPlayer
local healthESPEnabled = false
local healthTags = {}

local function addHealthTag(targetPlayer)
    if targetPlayer.Character and targetPlayer.Character:FindFirstChild("Head") then
        -- Cria um BillboardGui fixo acima da cabeça do jogador alvo
        local billboardGui = Instance.new("BillboardGui")
        billboardGui.Size = UDim2.new(0, 50, 0, 25) -- Tamanho fixo pequeno
        billboardGui.StudsOffset = Vector3.new(0, 3, 0)
        billboardGui.AlwaysOnTop = true
        billboardGui.Parent = targetPlayer.Character.Head

        -- Cria a TextLabel para mostrar a vida do jogador
        local healthLabel = Instance.new("TextLabel", billboardGui)
        healthLabel.Size = UDim2.new(1, 0, 1, 0)
        healthLabel.BackgroundTransparency = 1
        healthLabel.Text = "Health: " .. math.floor(targetPlayer.Character.Humanoid.Health)
        healthLabel.TextColor3 = Color3.new(1, 0, 0) -- Cor vermelha
        healthLabel.TextSize = 12  -- Tamanho pequeno fixo
        healthLabel.Font = Enum.Font.Gotham -- Fonte mais visível
        healthLabel.TextScaled = false

        -- Atualiza a vida do jogador constantemente
        targetPlayer.Character.Humanoid.HealthChanged:Connect(function()
            healthLabel.Text = "Health: " .. math.floor(targetPlayer.Character.Humanoid.Health)
        end)

        -- Guarda a referência da healthTag para futura remoção
        healthTags[targetPlayer] = healthLabel
    end
end

local function removeHealthTag(targetPlayer)
    if healthTags[targetPlayer] then
        healthTags[targetPlayer]:Destroy()
        healthTags[targetPlayer] = nil
    end
end

Toggle:OnChanged(function()
    healthESPEnabled = Toggle.Value
    if healthESPEnabled then
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            if otherPlayer ~= player then
                addHealthTag(otherPlayer)
            end
        end
        game.Players.PlayerAdded:Connect(function(newPlayer)
            if healthESPEnabled and newPlayer ~= player then
                newPlayer.CharacterAdded:Connect(function()
                    addHealthTag(newPlayer)
                end)
            end
        end)
    else
        for _, otherPlayer in pairs(game.Players:GetPlayers()) do
            removeHealthTag(otherPlayer)
        end
    end
end)

Options.HealthESP:SetValue(false)

Tabs.AntiLag:AddButton({
    Title = "Anti Lag",
    Description = "Click to disable effects and improve game performance.",
    Callback = function()
        -- Showing the dialog
        Window:Dialog({
            Title = "Performance Adjustment",
            Content = "You are about to disable effects to improve performance.",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        -- Anti-lag script
                        local ToDisable = {
                            Textures = true,
                            VisualEffects = true,
                            Parts = true,
                            Particles = true,
                            Sky = true
                        }

                        local ToEnable = {
                            FullBright = false
                        }

                        local Stuff = {}

                        for _, v in next, game:GetDescendants() do
                            if ToDisable.Parts then
                                if v:IsA("Part") or v:IsA("Union") or v:IsA("BasePart") then
                                    v.Material = Enum.Material.SmoothPlastic
                                    table.insert(Stuff, 1, v)
                                end
                            end

                            if ToDisable.Particles then
                                if v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or v:IsA("Fire") then
                                    v.Enabled = false
                                    table.insert(Stuff, 1, v)
                                end
                            end

                            if ToDisable.VisualEffects then
                                if v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("SunRaysEffect") then
                                    v.Enabled = false
                                    table.insert(Stuff, 1, v)
                                end
                            end

                            if ToDisable.Textures then
                                if v:IsA("Decal") or v:IsA("Texture") then
                                    v.Texture = ""
                                    table.insert(Stuff, 1, v)
                                end
                            end

                            if ToDisable.Sky then
                                if v:IsA("Sky") then
                                    v.Parent = nil
                                    table.insert(Stuff, 1, v)
                                end
                            end
                        end

                        game:GetService("TestService"):Message("Effects Disabler Script : Successfully disabled "..#Stuff.." assets / effects. Settings :")

                        for i, v in next, ToDisable do
                            print(tostring(i)..": "..tostring(v))
                        end

                        if ToEnable.FullBright then
                            local Lighting = game:GetService("Lighting")

                            Lighting.FogColor = Color3.fromRGB(255, 255, 255)
                            Lighting.FogEnd = math.huge
                            Lighting.FogStart = math.huge
                            Lighting.Ambient = Color3.fromRGB(255, 255, 255)
                            Lighting.Brightness = 5
                            Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
                            Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
                            Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
                            Lighting.Outlines = true
                        end
                        print("Performance improved successfully!")
                    end
                },
                {
                    Title = "Cancel",
                    Callback = function()
                        print("Action canceled.")
                    end
                }
            }
        })
    end
})

Tabs.AntiLag:AddButton({
    Title = "Anti Lag 2",
    Description = "Removes the FPS limit and improves performance, reducing lag.",
    Callback = function()
        Window:Dialog({
            Title = "Confirmation",
            Content = "Do you want to activate Anti Lag? This may improve performance in the game.",
            Buttons = {
                {
                    Title = "Confirm",
                    Callback = function()
                        -- Load and execute the FPS Unlocker (Anti Lag) script
                        loadstring(game:HttpGet('https://raw.githubusercontent.com/vexroxd/My-Script-/main/roblox%20fps%20unlocker%20script.lua'))()
                        print("Anti Lag activated.")
                    end
                },
                {
                    Title = "Cancel",
                    Callback = function()
                        print("Cancelled.")
                    end
                }
            }
        })
    end
})

-- Dropdown para Skills 1
local SkillsDropdown1 = Tabs.Skills:AddDropdown("SkillsDropdown1", {
    Title = "Skills 1",
    Values = { "LapseBlue", "ReversalRed", "RapidPunches", "TwofoldKick" },
    Multi = true,
    Default = {},
})

-- Dropdown para Skills 2
local SkillsDropdown2 = Tabs.Skills:AddDropdown("SkillsDropdown2", {
    Title = "Skills 2",
    Values = { "CursedStrikes", "CrushingBlow", "DivergentFist", "ManjiKick" },
    Multi = true,
    Default = {},
})

-- Dropdown para Skills 3
local SkillsDropdown3 = Tabs.Skills:AddDropdown("SkillsDropdown3", {
    Title = "Skills 3",
    Values = { "ReserveBall", "ShutterDoor", "RoughEnergy", "FeverBreaker" },
    Multi = true,
    Default = {},
})

-- Dropdown para Skills 4
local SkillsDropdown4 = Tabs.Skills:AddDropdown("SkillsDropdown4", {
    Title = "Skills 4",
    Values = { "RabbitEscape", "Nue", "DivineDog" },
    Multi = true,
    Default = {},
})

local runningScripts1 = {}
local runningScripts2 = {}
local runningScripts3 = {}
local runningScripts4 = {}

-- Função para iniciar a execução contínua de uma habilidade
local function startLoop(skillName, serviceName, scriptTable, extraArgs)
    if scriptTable[skillName] then return end
    scriptTable[skillName] = true

    spawn(function()
        while scriptTable[skillName] do
            local args = { [1] = false }
            if extraArgs then
                args = extraArgs
            end
            game:GetService("ReplicatedStorage"):WaitForChild("Knit"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(serviceName):WaitForChild("RE"):WaitForChild("Activated"):FireServer(unpack(args))
            wait(0.1)  -- Intervalo entre execuções
        end
    end)
end

-- Função para parar a execução contínua de uma habilidade
local function stopLoop(skillName, scriptTable)
    scriptTable[skillName] = nil
end

-- Lógica para o Dropdown 1 (Skills 1)
SkillsDropdown1:OnChanged(function(Value)
    if Value["LapseBlue"] then
        startLoop("LapseBlue", "LapseBlueService", runningScripts1)
    else
        stopLoop("LapseBlue", runningScripts1)
    end

    if Value["ReversalRed"] then
        startLoop("ReversalRed", "ReversalRedService", runningScripts1)
    else
        stopLoop("ReversalRed", runningScripts1)
    end

    if Value["RapidPunches"] then
        startLoop("RapidPunches", "RapidPunchesService", runningScripts1)
    else
        stopLoop("RapidPunches", runningScripts1)
    end

    if Value["TwofoldKick"] then
        startLoop("TwofoldKick", "TwofoldKickService", runningScripts1)
    else
        stopLoop("TwofoldKick", runningScripts1)
    end
end)

-- Lógica para o Dropdown 2 (Skills 2)
SkillsDropdown2:OnChanged(function(Value)
    if Value["CursedStrikes"] then
        startLoop("CursedStrikes", "CursedStrikesService", runningScripts2)
    else
        stopLoop("CursedStrikes", runningScripts2)
    end

    if Value["CrushingBlow"] then
        startLoop("CrushingBlow", "CrushingBlowService", runningScripts2)
    else
        stopLoop("CrushingBlow", runningScripts2)
    end

    if Value["DivergentFist"] then
        startLoop("DivergentFist", "DivergentFistService", runningScripts2)
    else
        stopLoop("DivergentFist", runningScripts2)
    end

    if Value["ManjiKick"] then
        startLoop("ManjiKick", "ManjiKickService", runningScripts2)
    else
        stopLoop("ManjiKick", runningScripts2)
    end
end)

-- Lógica para o Dropdown 3 (Skills 3)
SkillsDropdown3:OnChanged(function(Value)
    if Value["ReserveBall"] then
        startLoop("ReserveBall", "ReserveBallService", runningScripts3)
    else
        stopLoop("ReserveBall", runningScripts3)
    end

    if Value["ShutterDoor"] then
        startLoop("ShutterDoor", "ShutterDoorService", runningScripts3)
    else
        stopLoop("ShutterDoor", runningScripts3)
    end

    if Value["RoughEnergy"] then
        startLoop("RoughEnergy", "RoughEnergyService", runningScripts3)
    else
        stopLoop("RoughEnergy", runningScripts3)
    end

    if Value["FeverBreaker"] then
        startLoop("FeverBreaker", "FeverBreakerService", runningScripts3)
    else
        stopLoop("FeverBreaker", runningScripts3)
    end
end)

-- Lógica para o Dropdown 4 (Skills 4)
SkillsDropdown4:OnChanged(function(Value)
    if Value["RabbitEscape"] then
        local args = {
            [1] = workspace:WaitForChild("Characters"):WaitForChild("King_Raspberries")
        }
        startLoop("RabbitEscape", "RabbitEscapeService", runningScripts4, args)
    else
        stopLoop("RabbitEscape", runningScripts4)
    end

    if Value["Nue"] then
        startLoop("Nue", "NueService", runningScripts4)
    else
        stopLoop("Nue", runningScripts4)
    end

    if Value["DivineDog"] then
        startLoop("DivineDog", "DivineDogService", runningScripts4)
    else
        stopLoop("DivineDog", runningScripts4)
    end
end)

local Toggle = Tabs.Counter:AddToggle("NoStunToggle", {
    Title = "Enable No Stun", 
    Default = false,
    Description = "Activate to prevent the player from being stunned or knocked back."
})

Toggle:OnChanged(function()
    if Toggle.Value then
        -- Ativa o script de No Stun
        print("No Stun activated")
        
        -- Cria uma conexão para remover o stun
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()

        -- Função para remover status de stun
        local function removeStun()
            for _, status in pairs(character:GetChildren()) do
                if status:IsA("BoolValue") and (status.Name == "Stun" or status.Name == "Knockback") then
                    status:Destroy()
                end
            end
        end

        -- Conecta a função ao RunService enquanto o toggle estiver ativo
        local connection
        connection = game:GetService("RunService").Stepped:Connect(function()
            if not Toggle.Value then
                -- Desativa a conexão se o toggle estiver desligado
                connection:Disconnect()
                print("No Stun deactivated")
            else
                removeStun()
            end
        end)
    else
        print("No Stun deactivated")
    end
end)

Options.NoStunToggle:SetValue(false)

local Toggle = Tabs.Counter:AddToggle("NoSprintToggle", {
    Title = "Enable No Anti Sprint", 
    Default = false,
    Description = "Enable to remove sprint restrictions and set the desired sprint speed."
})

Toggle:OnChanged(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")

    local function removeAntiSprint()
        humanoid.WalkSpeed = 50  -- Set desired sprint speed
        humanoid.AutoRotate = true  -- Ensure the character rotates automatically
    end

    local function resetSprint()
        humanoid.WalkSpeed = 16  -- Normal walking speed
    end

    if Toggle.Value then
        -- Activates the removal of Anti Sprint
        print("No Anti Sprint activated")
        removeAntiSprint()

        -- Checks if the toggle is still active every frame
        game:GetService("RunService").Stepped:Connect(function()
            if not Toggle.Value then
                -- If the toggle is deactivated, reset the speed
                resetSprint()
            else
                removeAntiSprint()
            end
        end)
    else
        -- Deactivates No Anti Sprint, returning to normal speed
        print("No Anti Sprint deactivated")
        resetSprint()
    end
end)

Options.NoSprintToggle:SetValue(false)

Tabs.Others:AddButton({
    Title = "Aimbot",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/yzeedw/Mortalv2-main/main/UNIVERSAL%20AIMBOT"))()
    end
})

local Toggle = Tabs.Others:AddToggle("NoclipToggle", {
    Title = "Noclip", 
    Default = false,
    Description = "Enable to let the character pass through walls and disable collision."
})

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local noclipEnabled = false

-- Função para desativar a colisão
local function disableCollision()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = false
        end
    end
end

-- Monitora e aplica desativação de colisão
character.DescendantAdded:Connect(function(part)
    if noclipEnabled and part:IsA("BasePart") then
        part.CanCollide = false
    end
end)

-- Toggle para ativar ou desativar o noclip
Toggle:OnChanged(function()
    noclipEnabled = Toggle.Value
    if noclipEnabled then
        while noclipEnabled do
            disableCollision()
            wait(0.1) -- Ajuste o tempo conforme necessário para desempenho
        end
    else
        for _, part in pairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.CanCollide = true
            end
        end
    end
end)

local BlackFlashScriptOPSection = Tabs.Others:AddSection("Black Flash Script OP")

Tabs.Others:AddButton({
    Title = "Black Flash",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/SAZXHUB/black_flash_GUI/refs/heads/main/README.md"))()
    end
})

local minSpeed = 16
local maxSpeed = 100

-- Define a velocidade padrão
local defaultSpeed = 16

-- Função para ajustar a velocidade
local function setWalkSpeed(speed)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.WalkSpeed = speed
    end
end

-- Cria o input para definir a velocidade
local Input = Tabs.LocalPlayer:AddInput("Input", {
    Title = "Speed",
    Default = tostring(defaultSpeed),
    Placeholder = "Enter speed",
    Numeric = true, -- Permite apenas números
    Finished = true, -- Chama o callback apenas ao pressionar enter
    Callback = function(Value)
        print("Input changed:", Value)
    end
})

-- Cria o toggle para ativar a velocidade
local Toggle = Tabs.LocalPlayer:AddToggle("MyToggle", { Title = "Apply Speed", Default = false })

Toggle:OnChanged(function()
    -- Converte o valor do input para número
    local speed = tonumber(Input.Value)
    
    if Toggle.Value then
        -- Se o toggle estiver ativo e o valor for válido, ajusta a velocidade
        if speed and speed >= minSpeed and speed <= maxSpeed then
            setWalkSpeed(speed)
            print("Velocidade ajustada para:", speed)
        else
            print("Insira um valor entre " .. minSpeed .. " e " .. maxSpeed)
        end
    else
        -- Se o toggle estiver inativo, volta para a velocidade padrão
        setWalkSpeed(defaultSpeed)
        print("Velocidade ajustada para o padrão:", defaultSpeed)
    end
end)

-- Configura o toggle como falso ao iniciar
Options.MyToggle:SetValue(false)

local minJump = 50
local maxJump = 200

-- Define o valor padrão do Jump
local defaultJump = 50

-- Função para ajustar o Jump Power
local function setJumpPower(power)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("Humanoid") then
        player.Character.Humanoid.JumpPower = power
    end
end

-- Cria o input para definir o Jump Power
local Input = Tabs.LocalPlayer:AddInput("Input", {
    Title = "Jump Power",
    Default = tostring(defaultJump),
    Placeholder = "Enter jump power",
    Numeric = true, -- Permite apenas números
    Finished = true, -- Chama o callback apenas ao pressionar enter
    Callback = function(Value)
        print("Input changed:", Value)
    end
})

-- Cria o toggle para ativar o Jump Power
local Toggle = Tabs.LocalPlayer:AddToggle("MyJumpToggle", { Title = "Apply Jump", Default = false })

Toggle:OnChanged(function()
    -- Converte o valor do input para número
    local jumpPower = tonumber(Input.Value)
    
    if Toggle.Value then
        -- Se o toggle estiver ativo e o valor for válido, ajusta o Jump Power
        if jumpPower and jumpPower >= minJump and jumpPower <= maxJump then
            setJumpPower(jumpPower)
            print("Jump Power ajustado para:", jumpPower)
        else
            print("Insira um valor entre " .. minJump .. " e " .. maxJump)
        end
    else
        -- Se o toggle estiver inativo, volta para o valor padrão do Jump Power
        setJumpPower(defaultJump)
        print("Jump Power ajustado para o padrão:", defaultJump)
    end
end)

-- Configura o toggle como falso ao iniciar
Options.MyJumpToggle:SetValue(false)

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()