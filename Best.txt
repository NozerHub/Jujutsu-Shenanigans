Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = game:GetService("MarketplaceService"):GetProductInfo(17201094408).Name .. " | Nozer Hub",
    SubTitle = "",
    TabWidth = 120,
    Size = UDim2.fromOffset(500, 350),
    Acrylic = true,
    Theme = "Darker",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Credits = Window:AddTab({ Title = "Credits", }),
    Settings = Window:AddTab({ Title = "Settings", }),
    Farm = Window:AddTab({ Title = "Auto Farm", }),
    Boss = Window:AddTab({ Title = "Boss", }),
    Misc = Window:AddTab({ Title = "Misc", }),
}

local Options = Fluent.Options

Fluent:Notify({
    Title = "By Nozer Hub",
    Content = "Thanks for using the script!",
    Duration = 5
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)
Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 5
})

SaveManager:LoadAutoloadConfig()

-- /// ANTI AFK ///

local AntiAFKToggle = Tabs.Misc:AddToggle("AntiAFK", {Title = "Anti AFK", Default = true})

AntiAFKToggle:OnChanged(function(value)
    if value then
        connection = game:GetService("Players").LocalPlayer.Idled:Connect(function()
            game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(1)
            game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end)
    else
        if connection then
            connection:Disconnect()
            connection = nil
        end
    end
end)

-- /// AUTO FARM ///

local EnemyDropdown
local AutoFarmSelectedToggle
local UpdateButton
local selectedEnemy = nil

local function populateEnemyList()
    local enemies, enemyNames, uniqueNames = workspace.Monster.ShipHai:GetChildren(), {}, {}
    for _, enemy in ipairs(enemies) do
        if enemy.Name and not uniqueNames[enemy.Name] then
            local cleanName = enemy.Name:gsub("%d+", "")
            table.insert(enemyNames, cleanName)
            uniqueNames[enemy.Name] = true
        end
    end
    if EnemyDropdown then
        EnemyDropdown:SetValues(enemyNames)
    end
end

populateEnemyList()

local function getTargetEnemy()
    local area = workspace.Monster.ShipHai
    for _, enemy in ipairs(area:GetChildren()) do
        local cleanName = enemy.Name:gsub("%d+", "")
        if cleanName == selectedEnemy then
            return enemy
        end
    end
    return nil
end

EnemyDropdown = Tabs.Farm:AddDropdown("EnemyDropdown", {
    Title = "Select Enemy", 
    Default = nil, 
    Values = {}
})

AutoFarmSelectedToggle = Tabs.Farm:AddToggle("AutoFarmSelected", {
    Title = "Teleport to Selected Enemy", 
    Default = false
})

UpdateButton = Tabs.Farm:AddButton({
    Title = "Refresh Enemy", 
    Callback = function()
        populateEnemyList()
    end
})

EnemyDropdown:OnChanged(function(value)
    selectedEnemy = value
    -- Teleport immediately when a new enemy is selected
    if AutoFarmSelectedToggle.Value then
        local player, character = game:GetService("Players").LocalPlayer, game:GetService("Players").LocalPlayer.Character
        local targetEnemy = getTargetEnemy()

        if targetEnemy and targetEnemy:FindFirstChild("HumanoidRootPart") then
            local enemyPosition = targetEnemy.HumanoidRootPart.Position
            character:SetPrimaryPartCFrame(CFrame.new(enemyPosition))
        end
    end
end)

AutoFarmSelectedToggle:OnChanged(function()
    local player, character = game:GetService("Players").LocalPlayer, game:GetService("Players").LocalPlayer.Character
    
    if AutoFarmSelectedToggle.Value and selectedEnemy then
        -- Teleport to the selected enemy when the toggle is activated
        local targetEnemy = getTargetEnemy()

        if targetEnemy and targetEnemy:FindFirstChild("HumanoidRootPart") then
            local enemyPosition = targetEnemy.HumanoidRootPart.Position
            character:SetPrimaryPartCFrame(CFrame.new(enemyPosition))
        end
    end
end)

-- Lógica de atualização automática quando o inimigo atual desaparecer
game:GetService("RunService").Heartbeat:Connect(function()
    if AutoFarmSelectedToggle.Value and selectedEnemy then
        local player, character = game:GetService("Players").LocalPlayer, game:GetService("Players").LocalPlayer.Character
        local targetEnemy = getTargetEnemy()

        if targetEnemy == nil then
            -- O inimigo selecionado desapareceu, agora busca um novo inimigo com o mesmo nome
            local enemies = workspace.Monster.ShipHai:GetChildren()
            for _, enemy in ipairs(enemies) do
                local cleanName = enemy.Name:gsub("%d+", "")
                if cleanName == selectedEnemy then
                    -- Encontrou o inimigo com o mesmo nome, faz o teleport
                    local enemyPosition = enemy.HumanoidRootPart.Position
                    character:SetPrimaryPartCFrame(CFrame.new(enemyPosition))
                    return
                end
            end
        elseif targetEnemy and targetEnemy:FindFirstChild("HumanoidRootPart") then
            local enemyPosition = targetEnemy.HumanoidRootPart.Position
            character:SetPrimaryPartCFrame(CFrame.new(enemyPosition))
        end
    end
end)

-- /// ESP PLAYERS ///

local DeviceType = game:GetService("UserInputService").TouchEnabled and "Mobile" or "PC"
if DeviceType == "Mobile" then
    local ClickButton = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local ImageLabel = Instance.new("ImageLabel")
    local TextButton = Instance.new("TextButton")
    local UICorner = Instance.new("UICorner")
    local UICorner_2 = Instance.new("UICorner")

    ClickButton.Name = "ClickButton"
    ClickButton.Parent = game.CoreGui
    ClickButton.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ClickButton
    MainFrame.AnchorPoint = Vector2.new(1, 0)
    MainFrame.BackgroundTransparency = 0.8
    MainFrame.BackgroundColor3 = Color3.fromRGB(38, 38, 38) 
    MainFrame.BorderSizePixel = 0
    MainFrame.Position = UDim2.new(1, -60, 0, 10)
    MainFrame.Size = UDim2.new(0, 45, 0, 45)

    UICorner.CornerRadius = UDim.new(1, 0)
    UICorner.Parent = MainFrame

    UICorner_2.CornerRadius = UDim.new(0, 10)
    UICorner_2.Parent = ImageLabel

    ImageLabel.Parent = MainFrame
    ImageLabel.AnchorPoint = Vector2.new(0.5, 0.5)
    ImageLabel.BackgroundColor3 = Color3.new(0, 0, 0)
    ImageLabel.BorderSizePixel = 0
    ImageLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
    ImageLabel.Size = UDim2.new(0, 45, 0, 45)
    ImageLabel.Image = "rbxassetid://125432010647947"

    TextButton.Parent = MainFrame
    TextButton.BackgroundColor3 = Color3.new(1, 1, 1)
    TextButton.BackgroundTransparency = 1
    TextButton.BorderSizePixel = 0
    TextButton.Position = UDim2.new(0, 0, 0, 0)
    TextButton.Size = UDim2.new(0, 45, 0, 45)
    TextButton.AutoButtonColor = false
    TextButton.Font = Enum.Font.SourceSans
    TextButton.Text = ""
    TextButton.TextColor3 = Color3.new(220, 125, 255)
    TextButton.TextSize = 20

    TextButton.MouseButton1Click:Connect(function()
        game:GetService("VirtualInputManager"):SendKeyEvent(true, "LeftControl", false, game)
        game:GetService("VirtualInputManager"):SendKeyEvent(false, "LeftControl", false, game)
    end)
end